<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021年11月政治见闻</title>
      <link href="2021/11/01/political-news-in-november-2021/"/>
      <url>2021/11/01/political-news-in-november-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="2021年11月1日"><a class="markdownIt-Anchor" href="#2021年11月1日">#</a> 2021 年 11 月 1 日</h2><p>1、阿富汗塔利班最高领导人阿洪扎达在坎大哈一学校露面，系 2016 年来首次<br> 2、澳总理峰会遭遇尴尬时刻：先被拜登无情 “甩锅”，又被马克龙 “冷眼相待”<br>3、英法捕鱼权冲突持续，约翰逊要欧盟 “控制” 马克龙<img src="https://world.huanqiu.com/article/45OxYGGhYhp" alt=""><br> 4、</p>]]></content>
      
      
      
        <tags>
            
            <tag> 政治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Re库学习笔记</title>
      <link href="2021/10/31/re-library-learning-notes/"/>
      <url>2021/10/31/re-library-learning-notes/</url>
      
        <content type="html"><![CDATA[<h3 id="re库正则表达式"><a class="markdownIt-Anchor" href="#re库正则表达式">#</a> Re 库 —— 正则表达式</h3><p>re 库是一个对搜索十分便利的表达工具，但是 re 库的表达符号确实是让人有些头大，不过这是最简便的搜索符号，对于这个库我们也称其为正则表达式库</p><h2 id="特殊字符"><a class="markdownIt-Anchor" href="#特殊字符">#</a> 特殊字符</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/11/a461d7bd84ce7732.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/11/f84f08fea4d1c69e.png" alt=""><br>"." 这个操作符是正则表达式的第一个操作符，但是基本上找不到实例所以只能自己构建一个</p><p><img src="https://ftp.bmp.ovh/imgs/2021/11/5fe074672639bfa3.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/11/1c1946b1e6360b3f.png" alt=""><br>"[]" 这个操作符的取值范围是在 [1-9, a-z, A-Z] 中的，如果想要获取其中一个范围的值就要说明值的范围</p><p><img src="https://ftp.bmp.ovh/imgs/2021/11/5cf9ba19ac2bf0f8.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/11/5d0292f1fbcb9a4b.png" alt=""><br>"[^]" 这个操作符是一个获取排除字符以外的所有字符</p><p><img src="https://ftp.bmp.ovh/imgs/2021/11/b48b4cb3bd2191af.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/11/2813e2c32a84d70d.png" alt=""><br>"*+?" 这三个操作符其实都是查找拓展字符</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年10月政治见闻</title>
      <link href="2021/10/29/political-news-in-october-2021/"/>
      <url>2021/10/29/political-news-in-october-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="2021年10月22日至2021年10月29日"><a class="markdownIt-Anchor" href="#2021年10月22日至2021年10月29日">#</a> 2021 年 10 月 22 日至 2021 年 10 月 29 日</h2><p>1、中俄巴与塔利班进行会谈，将会对塔利班政府的经济军事等领域有重大影响<br> 2、中俄的 2021 联合军演的实施让日本感受到威胁<br> 3、日本首相岸田文雄希望对自卫队改革，或成为军队<br> 4、土耳其总统埃尔多安要求联合国撤销五常的一篇否决权，普京对此反驳<br> 5、美英等国对中国台湾香港的人权问题进行发难，80 多国为此打抱不平，常驻联合国张军大使表示他国无权插手中国内政<br> 6、印度国产航母 “维克兰特” 的第二次出海测试航母漏油<br> 7、北京时间 10 月 27 日，德国当地时间 26 日，默克尔正式卸任总理，表明默克尔时代结束，现任德国总统施泰因迈尔<br> 8、因为新冠疫情，美国的经济面临失控，拜登政府要求工人不停干活，同时供应链的问题，使得美国开始通货膨胀</p><h2 id="2021年10月30日"><a class="markdownIt-Anchor" href="#2021年10月30日">#</a> 2021 年 10 月 30 日</h2><p>1、印度试图插手南海事务，美国报道印度正在发展超高音速武器，但是最后打脸印度，称其离不开俄罗斯武器<br> 2、蔡英文近期接受境外记者采访时承认美军在岛内的活动<br> 3、自美奥的核潜艇交易法国的愤怒后，美国总统拜登与法国总统马克龙会晤，称美行为很愚蠢<br> 4、澳大利亚前总理阿博特，宣称中国大陆很快就会 “入侵” 台湾，西方国家应制定好经济和军事应对措施<br> 5、东非共同体秘书长：东共体愿学习借鉴中国发展经验，愿同中国加强交流合作<br> 6、由于全球能源危机，马克龙：没证据表明俄罗斯在操纵欧洲能源市场价格<br> 7、奥巴马将参加即将在英国格拉斯哥举办的 COP26，美媒称其将参加 COP26 为拜登 “打气”，网友：完全没用<br> 8、法英渔业争端升级 英国称将对欧盟渔船实施更多检查，这或许将会是法国或欧盟与英国的矛盾升级的起点</p><p>##2021 年 10 月 31 日<br> 1、苏丹多地爆发示威活动，反对军方政变，在恩图曼市的游行示威活动中，已有两名示威者被杀<br> 2、当地时间 10 月 30 日，美国疾病控制与预防中心：18 岁以下未接种疫苗外国旅客入境美国无需隔离<br> 3、日本第 49 届众议院选举投票开始，新冠肺炎对策和经济重建措施成为各政党竞选的主要争论点<br> 4、美国空军大量士兵拒绝接种新冠疫苗，对拒绝接种新冠疫苗士兵的惩罚可能包括解雇或接受军事司法系统的指控<br> 5、美国一男子因销售假新冠疫苗面临指控<br> 6、拜登 “明确承诺”，只要伊朗恢复履约，美国愿重返并全面遵守伊核协议<br> 7、俄外交部：部分接种俄疫苗的俄外交官在海外遭受歧视<br> 8、攻击航空公司信息系统、观测军事基地气象数据…… 国家安全机关披露三起境外数据窃密案<br> 9、“时间管理” 又失败？拍 G20 峰会大合影，约翰逊还是迟到了<br> 10、网友都懵了！气候峰会前，拜登带 85 辆汽车组成的 “超长” 车队见教皇<br> 11、尬！莫里森 G20 峰会强行搭讪马克龙还称对方 “很高兴”，但照片上马克龙眼神凌厉<br><img src="https://ftp.bmp.ovh/imgs/2021/11/61dac08bd8769643.png" alt=""><br> 11、医生建议 95 岁英女王休息两周 英首相称女王精神很好<br> 12、日媒：日本担忧美国采取 “不首先使用核武器” 政策，一些美国的北约盟友也抱有类似想法<br> 13、日本迎疫情后首场大选，选战焦点是防疫、经济再生、外交及安全保障政策等，“自民党独大” 还能持续吗？<br>14、英法渔业冲突升级之际 G20 举行，会场上约翰逊 “猛冲” 向马克龙？<br><img src="https://ftp.bmp.ovh/imgs/2021/11/ffa9c6d6b0d43c4c.png" alt=""><br>15、韩国在野党党首安哲秀将宣布竞选下届总统 韩国总统大选五强对阵？<br>16、外媒：塔利班最高领导人海巴图拉・阿洪扎达首次公开露面<br> 17、南海战略态势感知：敏感时刻，美军核侦察机现身南海<br> 18、美欧宣布就解决钢铝关税争端达成协议<br> 19、美国会骚乱调查：特朗普想保密的逾 700 页文件是什么？<br><img src="https://ftp.bmp.ovh/imgs/2021/11/40b67e11b4fad2c0.png" alt=""><br>20、突发！美国驻伊拉克大使馆附近落下 3 枚火箭弹<br> 21、古特雷斯：未来 30 年海平面上升或使沿海超 8 亿人面临风险<br> 22、出口调查显示自民党和公明党执政联盟获超过日本众议院半数议席<br> 23、不甘心当牺牲品？莫里森公开反驳拜登说法：我们跟法国的潜艇协议生变美国都知情<br> 24、英法首脑望共商可行措施 减少两国渔业冲突<br><img src="https://ftp.bmp.ovh/imgs/2021/11/1ef2194c2a65ba45.png" alt=""><br> 25、外媒：英国知名珠宝商遭黑客 “虚拟抢劫”，特朗普、贝克汉姆等人信息被泄露<br><img src="https://ftp.bmp.ovh/imgs/2021/11/efaf9ab381378fb3.png" alt=""><br> 26、自民党干事长甘利明：如果我在众议院选举中落败，“不得不将自身进退交给岸田文雄发配”<br><img src="https://ftp.bmp.ovh/imgs/2021/11/cc522b25e1155d4e.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 政治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo错误报告</title>
      <link href="2021/10/23/hexo-error-reporting/"/>
      <url>2021/10/23/hexo-error-reporting/</url>
      
        <content type="html"><![CDATA[<h1 id="fatal-无法读取远程仓库"><a class="markdownIt-Anchor" href="#fatal-无法读取远程仓库">#</a> fatal: 无法读取远程仓库</h1><p><img src="https://ftp.bmp.ovh/imgs/2021/10/d3c31572c02aed1b.png" alt=""><br>这是我的报错截图<br>视线还请不要放在 Spawn failed 上，因为那不是真正的错误，上面的 "fatal: 无法读取远程仓库。" 才是真正的错误<br>解决方法如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个报错是由于 github 没有接收到而产生的，所以需要重新更换 ssh 公钥，这个命令是查看报错原因<br>由于需要更换公钥，建议使用以下命令再更换公公钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 github，在头像下面找到设置，进去点击 SSH，更换公钥，公钥在～/.ssh/id_rsa.pub 中，id_rsa 则是私钥<br>更换完后，使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会提示可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装selenium库</title>
      <link href="2021/10/23/selenium-install/"/>
      <url>2021/10/23/selenium-install/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h1><p>说实话，这次的博客是我最痛苦的，我在学习数据抓取的时候发现沐神的抓取用得失 selenium 的库，我心想着简单，就去下载了，结果还学要下载个驱动，不过连驱动也下载好的时候我竟然不知道放在哪里好了，官方文档说 /opt/bin 中会有，结果没有，厚爱弄了好久才发现其实横简单</p><h1 id="安装"><a class="markdownIt-Anchor" href="#安装">#</a> 安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pip <span class="token function">install</span> selenium $ conda <span class="token function">install</span> selenium<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>pip 下载假如有依赖问题解决不了可以使用 conda，只是说匹配更新速度快资源全</p><h1 id="驱动"><a class="markdownIt-Anchor" href="#驱动">#</a> 驱动</h1><p>不同的浏览器是需要不同的驱动我目前使用得失 Chrome 的驱动，不过无论如何都是先要查找浏览器的版本信息，比如 Chrome 的是执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ chrome://version/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而 edge 则是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">edge://settings/help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到版本信息后上网下载驱动，我所看到的是我下载的网站，虽然官方也有，但是我看不懂，所以我在这里贴出网址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ http://npm.taobao.org/mirrors/chromedriver/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据浏览器的版本信息选择下载那个，我的浏览器是 94.0.4606.81，所以我找最近的是 v94.0.4606.61，点进去后根据系统下载<br>最后是放的位置，我个人感觉还是放在 /usr/bin 中最合适，虽然我还没有仔细研究过 Linux 的运行，千万还要记住配置文件.bashrc</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/bin/chromedriver_linux64 <span class="token operator">&gt;&gt;</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结束后可以运行一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ chromedriver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://ftp.bmp.ovh/imgs/2021/10/76bdd2b5fc72ce81.png" alt=""></p><h1 id="运行"><a class="markdownIt-Anchor" href="#运行">#</a> 运行</h1><p>闲来没事可以运行以下代码，我试过运行的时候说 IPV6 被占用，我也不清楚被谁占用了，只要重启就解决了<br>给个代码运行一下吧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.kinomotosakura.net'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda3安装</title>
      <link href="2021/10/20/anaconda3-install/"/>
      <url>2021/10/20/anaconda3-install/</url>
      
        <content type="html"><![CDATA[<h2 id="anaconda3安装"><a class="markdownIt-Anchor" href="#anaconda3安装">#</a> anaconda3 安装</h2><p>真是时隔多年的安装 anaconda3，电脑的系统空间不足误删了 anaconda，后来发现原来之前用 minconda 替换了 anaconda，这个要用就要用原版的，所以我将 miconda 卸载了，重新安装了 anaconda</p><h1 id="anaconda3下载"><a class="markdownIt-Anchor" href="#anaconda3下载">#</a> anaconda3 下载</h1><p>我还记得那时候什么都不懂还是嘉鸿帮我安装的，在清华源找到 anaconda3，注意选择版本，Windows 和 Linux 不能混为一谈，我安装的是 Debin 版本的<br><img src="https://ftp.bmp.ovh/imgs/2021/10/110443ed546f7ce9.png" alt=""></p><h1 id="安装"><a class="markdownIt-Anchor" href="#安装">#</a> 安装</h1><p>安装的命令是要看版本的 Windows 的点击图标，基本上 Windows 的安装没有什么要注意的，只是在配置环境变量的时候要注意不要走配置错误，在系统配置将 anaconda 的路劲编辑进去，还要加上 /bin 才是完整的路径<br> Linux 的需要命令，首先将安装包放入需要安装的位置，不妨也行，只是我懒得在后面更改位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">bash</span> Anaconda3-2020.11-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行这条命令可以进入安装时刻，后面有询问是否安装此位置，按照你需要安装的位置判断，后面全部选择 yes 就可以了</p><h1 id="报错"><a class="markdownIt-Anchor" href="#报错">#</a> 报错</h1><p>由于我是第二次安装，需要建在.bashrc 文件上的 minconda 配置删除。<br>我后来出现一个错误，按 conda 命令也无法执行，是因为 conda 的配置没有写入.bashrc 文件，需要在文件中写入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/home/yuban/anaconda3/bin:<span class="token environment constant">$PATH</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入后保存并执行下一条命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令能够运行配置文件，之后 anaconda 的配置内容会自动更新在配置文件中</p><h1 id="运行环境"><a class="markdownIt-Anchor" href="#运行环境">#</a> 运行环境</h1><p>base 这个运行环境是我一直在使用的，也无需创建一个新的运行环境，但是我发现我的电脑无法在打开终端的第一时间就在 base 的运行环境里，我记得嘉鸿曾经帮我弄过一条命令，实在.bashrc 配置文件里直接使用的，我试了试一直在报错，始终无法第一时间进入 base 环境中，后来我才发现命令要在 anaconda 的配置信息之后才能运行<br><img src="https://ftp.bmp.ovh/imgs/2021/10/509a9f136e962080.png" alt=""><br>最终结果如下<br><img src="https://ftp.bmp.ovh/imgs/2021/10/c24bde1213d3dba8.png" alt=""><br>于是我有成功是用会 anaconda3</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>base与gluon的转换</title>
      <link href="2021/05/21/the-transformation-between-base-and-gluon/"/>
      <url>2021/05/21/the-transformation-between-base-and-gluon/</url>
      
        <content type="html"><![CDATA[<h3 id="anaconda"><a class="markdownIt-Anchor" href="#anaconda">#</a> Anaconda</h3><p>在清华源内下载 anaconda 的镜像，运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">bash</span> Anaconda3-2020.11-Linux-x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="gluon"><a class="markdownIt-Anchor" href="#gluon">#</a> gluon</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ conda activate gluon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 base 转换为 gluon<br><img src="https://ftp.bmp.ovh/imgs/2021/05/80ae83ea3972185e.png" alt=""></p><p>相互转换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ conda activate <span class="token comment">#转换的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaggle注册</title>
      <link href="2021/05/18/kaggle-registration/"/>
      <url>2021/05/18/kaggle-registration/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h3><p>kaggle 的注册是我一个痛苦之处，因为我的注册码，人机验证就从来没有出现过，但是现在我成功注册了，现在就来搞个教程</p><h3 id="注册"><a class="markdownIt-Anchor" href="#注册">#</a> 注册</h3><p>科学上网是必要的，因为注册的是国际的，应该是吧，反正我也是看网上的说法做的<br>我最大的问题是人机验证出不来，那是因为我的网页翻译打开了，所以出不来</p><p>原网页等待验证，接着就是熟悉的注册环节了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据预处理</title>
      <link href="2021/05/17/data-preprocessing/"/>
      <url>2021/05/17/data-preprocessing/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h3><p>实话实说，数据预处理是我在深度学习中最薄弱的一环，我估计这一环都很难度过了，不过这也是一种学习的过程<br><a href="https://blog.csdn.net/u010089444/article/details/70053104?utm_source=app&amp;app_version=4.7.1&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen"> https://blog.csdn.net/u010089444/article/details/70053104?utm_source=app&amp;app_version=4.7.1&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen</a><br> 这个网站的内容对你理解如何做数据预处理十分有帮助，所以以下的这一张图片大概的讲述了特征工程做数据预处理的步骤<br><img src="https://ftp.bmp.ovh/imgs/2021/05/8434f652f297597e.png" alt=""><br>接下来将讲述我对数据预处理的理解</p><h3 id="数据的格式"><a class="markdownIt-Anchor" href="#数据的格式">#</a> 数据的格式</h3><p>首先我们使用最常见的一个数据集 iris，鸢尾花的数据集看看格式<br><img src="https://ftp.bmp.ovh/imgs/2021/05/46a98dee97e6df57.png" alt=""><br>这是鸢尾花的数据集，我们可以看出这是以字典格式输出，那我们的数据集是否要做成字典格式呢<br> emm，其实什么格式都可以但是要能够让程序读取就可以了，比如说这个数据集中 data 的值是可以使用 numpy 读取的<br>所以说让程序读取到数据才是关键</p><h3 id="数据集的划分"><a class="markdownIt-Anchor" href="#数据集的划分">#</a> 数据集的划分</h3><p>数据集要划分为训练集，验证集和测试集三种，这时候我们可以导入函数进行划分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_splitX_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.33</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是划分的方法之一，但是这在机器学习中使用的是十分的普遍<br>像猫狗识别类型的深度学习案例，我是直接将其按照数量划分</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猫狗识别</title>
      <link href="2021/05/14/dog-and-cat-recognition/"/>
      <url>2021/05/14/dog-and-cat-recognition/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h3><p>猫狗识别是一个经典的深度学习的案例</p><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤">#</a> 步骤</h3><p>导入数据集，训练集，验证集，测试集<br>使用 os.listdir 查看目录下的图片的数量</p><p>训练模型<br>处理的是更大的图像和更复杂的问题，你需要相应地增大网络，即再增加一个 Conv2D+MaxPooling2D 的组合<br>既可以增大网络容量，也可以进一步减小特征图的尺寸，使其在连接 Flatten 层时尺寸不会太大<br> filters 滤波器的个数，kernel_size 滤波器的大小，激活函数，第一层还要加入 input_shape 输入，矩阵大小和 RBG 的通道 3<br> 最大池化层一个 2*2 的 MaxPooling2D ((2,2))<br> Flatten () 压平这个矩阵<br> Dense (units 该层有几个神经元，激活函数)<br> Dense layer 就是常提到和用到的 全连接层</p><p>complie(loss,optimizer,metrics)</p><p>数据预处理<br>数据输入神经网络之前，应该将数据格式化为经过预处理的浮点数张量<br> (1) 读取图像文件。<br>(2) 将 JPEG 文件解码为 RGB 像素网格。<br>(3) 将这些像素网格转换为浮点数张量。<br>(4) 将像素值（0~255 范围内）缩放到 [01] 区间（神经网络喜欢处理较小的输入值）<br>Keras 拥有自动完成这些步骤的工具。Keras 有一个图像处理辅助工具的模块，位于 keras.preprocessing.image</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>rescale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">)</span>test_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>rescale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>缩放到 1/255 的大小，在我看来着更像是图像的归一化<br>将图像大小调整为 (224,224)，因为使用了 binary_crossentropy 损失，所以要使用二进制标签<br> color_mode 颜色模式默认为 RGB，代表这些图片是否会被转换为单通道或三通道的图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_gnerator <span class="token operator">=</span> train_datagen<span class="token punctuation">.</span>flow_from_directory<span class="token punctuation">(</span>train_dir<span class="token punctuation">,</span><span class="token comment">#目标目录</span>target_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">#调整图像的大小</span>batch_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>class_mode<span class="token operator">=</span><span class="token string">'binary'</span><span class="token punctuation">)</span><span class="token comment">#因为使用了binary_crossentropy损失，所以需要使用二进制标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用批量生成器拟合模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_generator<span class="token punctuation">(</span>train_generator<span class="token punctuation">,</span>生成器函数steps_per_epoch<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">#当生成器返回steps_per_epoch次数据时计一个epoch结束，执行下一个epoch</span>epochs<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span>迭代<span class="token number">30</span>轮validation_data<span class="token operator">=</span>validation_generator<span class="token punctuation">,</span><span class="token comment">#生成验证集的生成器</span>validation_steps<span class="token operator">=</span><span class="token number">50</span><span class="token comment">#当validation_data为生成器时，本参数指定验证集的生成器返回次数)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'cats_and_dogs_small_1.h5'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回执训练过程中的损失曲线和精度曲线</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltacc <span class="token operator">=</span> history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'acc'</span><span class="token punctuation">]</span>val_acc <span class="token operator">=</span> history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'val_acc'</span><span class="token punctuation">]</span>loss <span class="token operator">=</span> history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'loss'</span><span class="token punctuation">]</span>val_loss <span class="token operator">=</span> history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'val_loss'</span><span class="token punctuation">]</span>epochs <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epochs<span class="token punctuation">,</span> acc<span class="token punctuation">,</span> <span class="token string">'bo'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Training acc'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epochs<span class="token punctuation">,</span> val_acc<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Validation acc'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Training and validation accuracy'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epochs<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> <span class="token string">'bo'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Training loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epochs<span class="token punctuation">,</span> val_loss<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Validation loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Training and validation loss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特别增加篇数据增强"><a class="markdownIt-Anchor" href="#特别增加篇数据增强">#</a> 特别增加篇 —— 数据增强</h3><p>过拟合的原因是学习样本太少，导致无法训练出能够泛化到新数据的模型。如果拥有无限的数据，那么模型能够观察到数据分布的所有内容，这样就永远不会过拟合。数据增强是从现有的训练样本中生成更多的训练数据，其方法是利用多种能够生成可信图像的随机变换来增加（augment）样本。其目标是，模型在训练时不会两次查看完全相同的图像。这让模型能够观察到数据的更多内容，从而具有更好的泛化能力</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>rotation_range<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token comment">#旋转范围</span>width_shift_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token comment">#水平平移范围</span>height_shift_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token comment">#垂直平移范围</span>shear_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token comment">#float, 透视变换的范围</span>zoom_range0<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">#缩放范围</span>horizontal_flip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token comment">#水平反转</span>fill_mode<span class="token operator">=</span><span class="token string">'nearest'</span><span class="token comment">#填充模式, constant, nearest, reflect)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ftp.bmp.ovh/imgs/2021/05/ab2fdbf9f302d327.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/05/43ae09f794df30a3.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/05/dd6c4f0a40374634.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/05/1314b0d3ce2a936f.png" alt=""><br>使用数据增强可以避免过拟合的现象发生过大</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>温室效应</title>
      <link href="2021/05/13/greenhouse-effect/"/>
      <url>2021/05/13/greenhouse-effect/</url>
      
        <content type="html"><![CDATA[<p>温室效应是近些年来我们都能深刻感受到的一种现象</p><p>温室效应，又称 “花房效应”，是大气保温效应的俗称。大气能使太阳短波辐射到达地面，但地表受热后向外放出的大量长波热辐射线却被大气吸收，这样就使地表与低层大气温度增高，因其作用类似于栽培农作物的温室，故名温室效应。自工业革命以来，人类向大气中排入的二氧化碳等吸热性强的温室气体逐年增加，大气的温室效应也随之增强，其引发了一系列问题已引起了世界各国的关注。</p><p>这一段摘自百度百科的话，是在说明，地球接受了太阳的短波，却不能将长波返回<br>就像借了钱的人我发还钱一样，人不能还钱有多种原因，但是地球的温室效应是因为二氧化碳的增加</p><h3 id="定义"><a class="markdownIt-Anchor" href="#定义">#</a> 定义</h3><p>温室效应是指透射阳光的密闭空间由于与外界缺乏热对流而形成的保温效应，即太阳短波辐射可以透过大气射入地面，而地面增暖后放出的长波辐射却被大气中的二氧化碳等物质所吸收，从而产生大气变暖的效应。大气中的二氧化碳就像一层厚厚的玻璃，使地球变成了一个大暖房。<br>如果没有大气，地表平均温度就会下降到 - 23℃，而实际地表平均温度为 15℃，这就是说温室效应使地表温度提高 38℃。大气中的二氧化碳浓度增加，阻止地球热量的散失，使地球发生可感觉到的气温升高，这就是有名的 “温室效应”。</p><h3 id="原理"><a class="markdownIt-Anchor" href="#原理">#</a> 原理</h3><p>世界上，宇宙中任何物体都辐射电磁波。物体温度越高，辐射的波长越短。太阳表面温度约 6000K，它发射的电磁波长很短，称为太阳短波辐射（其中包括从紫到红的可见光）。地面在接受太阳短波辐射而增温的同时，也时时刻刻向外辐射电磁波而冷却。地球发射的电磁波长因为温度较低而较长，称为地面长波辐射。短波辐射和长波辐射在经过地球大气时的遭遇是不同的：大气对太阳短波辐射几乎是透明的，却强烈吸收地面长波辐射。大气在吸收地面长波辐射的同时，它自己也向外辐射波长更长的长波辐射（因为大气的温度比地面更低）。其中向下到达地面的部分称为逆辐射。地面接受逆辐射后就会升温，或者说大气对地面起到了保温作用。这就是大气温室效应的原理。</p><h3 id="直接原因"><a class="markdownIt-Anchor" href="#直接原因">#</a> 直接原因</h3><p>温室效应主要是由于现代化工业社会过多燃烧煤炭、石油和天然气，产生的和大量排放的汽车尾气中含有的二氧化碳气体进入大气造成的。</p><h3 id="相关特点"><a class="markdownIt-Anchor" href="#相关特点">#</a> 相关特点</h3><p>温室有两个特点：1. 室内温度高，2. 不散热。<br>生活中我们可以见到的玻璃育花房和蔬菜大棚就是典型的温室。使用玻璃或透明塑料薄膜来做温室，是让太阳光能够直接照射进温室，加热室内空气，而玻璃或透明塑料薄膜又可以不让室内的热空气向外散发，使室内的温度保持高于外界的状态，以提供有利于植物快速生长的条件。之所以称这一效应为温室效应，亦与此原理有关。</p><h3 id="主要影响"><a class="markdownIt-Anchor" href="#主要影响">#</a> 主要影响</h3><p>气候影响</p><p>温室气体有效地吸收地球表面、大气本身相同气体和云所发射出的红外辐射。大气辐射向所有方向发射，包括向下方的地球表面的放射。温室气体则将热量捕获于地面 - - 对流层系统之内。这被称为 “自然温室效应”。大气辐射与其气体排放的温度水平强烈耦合。在对流层中，温度一般随高度的增加而降低。从某一高度射向空间的红外辐射一般产生于平均温度在 - 19℃的高度，并通过太阳辐射的收入来平衡，从而使地球表面的温度能保持在平均 1 4 ℃。温室气体浓度的增加导致大气对红外辐射不透明性能力的增强，从而引起由温度较低、高度较高处向空间发射有效辐射。这就造成了一种辐射强迫，这种不平衡只能通过地面 对流层系统温度的升高来补偿。这就是 “增强的温室效应”。如果大气不存在这种效应，那么地表温度将会下降约 33 度或更多。反之，若温室效应不断加剧，全球温度也必将逐年持续升高。<br>自十九世纪以来的 100 年间全球地表气温上升或 0.2 一 0.69℃。从 1880 一 1998 年间 119 年的资料看，全球变暖的趋势为 0.53℃/100a。150 年来在威丝康星和日本等各地方记录下来的湖面结冰和融化的时间变化为全球变暖提供了进一步的证据。在 1946 一 1995 年这些湖泊的结冰时间晚了 9.5d 而融化时间提早了 8.6d，在这一期间，平均气温上升了 1.8℃。气候变暖主要发生在本世纪 20 年代到 40 年代以及 70 年代中期以来的两个时期。进人 80 年代以来全球温度的上升有加速的趋势，90 年代后的 1990 年、1995 年、1997 年和 1998 年全球平均温度数次创历史最高记录，过去的 10 年是自 1659 年开始记录气象以来北半球最暖的 10 年。一般而言，全球变暖呈现较大的区域差异，高纬度地区的增温大于低纬地区，陆地变暖比海洋明显。据预测下世纪全球年平均气温将升高 1.5- 4.59℃，北半球中高维地区温度将升高 5 一 10℃，全球气温将以 0.39C/l0a (0.2-0.5℃) 的速度增加，这将使全球平均气温在 2025 年增加 1.0℃、下世纪末增加 3.0℃。速度之快是过去十万多年来最高的。尽管对增温幅度的预测不尽相同，但可以肯定的是未来全球气温将是不断升高的趋势。<br>在 2006 年公布的气候变化经济学报告中显示，如果我们仅以 2006 年的生活方式，到 2100 年全球气温将有 50% 的可能会上升 4 摄氏度多。同时，英国《卫报》表示，气温如果这样升高就会打乱全球数百万人的生活，甚至全球的生态平衡，最终导致全球发生大规模的迁移和冲突。</p><p>环境影响</p><p>①全球变暖<br>温室气体浓度的增加会减少红外线辐射放射到太空外，地球的气候因此需要转变来使吸取和释放辐射的份量达至新的平衡。这转变可包括‘全球性’的地球表面及大气低层变暖，因为这样可以将过剩的辐射排放出外。虽然如此，地球表面温度的少许 上升可能会引发其他的变动，例如：大气层云量及环流的转变。当中某些转变可使地面变暖加剧（正反馈），某些则可令变暖过程减慢（负反馈）。利用复杂的气候模式，‘政府间气候变化专门委员会’在第三份评估报告估计全球的地面平均气温会在 2100 年上升 1.4 至 5.8℃。这预计已考虑到大气 层中悬浮粒子倾于对地球气候降温的效应与及海洋吸收热能的作用 （海洋有较大的热容量）。但是，还有很多未确定的因素会影响 这个推算结果，例如：未来温室气体排放量的预计、对气候转变的各种反馈过程和海洋吸热的幅度等等。<br>②地球上的病虫害增加<br>温室效应可使史前致命病毒威胁人类，美国科学家发出警告，由于全球气温上升令北极冰层融化，被冰封十几万年的史前致命病毒可能会重见天日，导致全球陷入疫症恐慌，人类生命受到严重威胁。纽约锡拉丘兹大学的科学家在最新一期《科学家杂志》中指出，早前他们发现一种植物病毒 TOMV，由于该病毒在大气中广泛扩散，推断在北极冰层也有其踪迹。于是研究员从格陵兰抽取 4 块年龄由 500 至 14 万年的冰块，结果在冰层中发现 TOMV 病毒（Tomato Masaic Virus 番茄花叶病毒纽）。研究员指该病毒表层被坚固的蛋白质包围，因此可在逆境生存。<br>这项新发现令研究员相信，一系列的流行性感冒、小儿麻痹症和天花等疫症病毒可能藏在冰块深处，人类对这些原始病毒尚无抵抗能力，当全球气温上升令冰层融化时，这些埋藏在冰层千年或更长的病毒便可能会复活，形成疫症。科学家表示，虽然他们不知道这些病毒的生存希望，或者其再次适应地面环境的机会，但肯定不能抹煞病毒卷土重来的可能性。<br>③海平面上升<br>假若‘全球变暖’正在发生，有两种过程会导致海平面升高。第一种是海水受热膨胀令水平面上升。第二种是冰川和格陵兰及南 极洲上的冰块溶解使海洋水份增加。预期由 1900 年至 2100 年地球的平均海平面上升幅度介乎 0.09 米至 0.88 米之间。<br>全球暖化南太小岛即将没顶，全球暖化使南北极的冰层迅速融化，海平面上升对岛屿国家和沿海低洼地区带来的灾害是显而易见的，突出的是：淹没土地，侵蚀海岸。全世界岛屿国家有 40 多个，大多分布在太平洋和加勒比海地区，地理面积总和约为 77 万平方公里，人口总和约为 4300 万，依据《联合国海洋法公约》有关规定，这些岛国将负责管理占地球表面 1/5 的海洋环境，其重要战略地位是不言而喻的。尽管这些岛国人均国民产值普遍较高，但极易遭受海洋灾害毁灭性的打击，特别是全球气候变暖海平面上升的威胁最为严重，很多岛国的国土仅在海平面上几米，有的甚至在海平面以下，靠海堤围护国土，海平面上升将使这些国家面临淹没的危险。<br>沿海区域是各国经济社会发展最迅速的地区，也是世界人口最集中的地区，约占全世界 60% 以上的人口生活在这里。各洲的海岸线约有 35 万公里，其中近万公里为城镇海岸线，海平面上升这些地区将是首当其冲的重灾区。据有关研究结果表明，当海平面上升 1 米以上，一些世界级大城市，如纽约、伦敦、威尼斯、曼谷、悉尼、上海等将面临浸没的灾难；而一些人口集中的河口三角洲地区更是最大的受害者，特别是印度和孟加拉间的恒河三角洲、越南和柬埔寨间的湄公河三角洲，以及我国的长江三角洲、珠江三角洲和黄河三角洲等。据估算当海平面上升 1 米时，我国沿海将有 12 万平方公里土地被淹，7 千万人口需要内迁；在孟加拉国将失去现有土地的 12%，占人口总量的 1/10 将出走；占世界海岸线 15% 的印度尼西亚，将有 40% 的国土受灾；而工业比较集中的北美和欧洲一些沿海城市也难幸免。<br>④土地沙漠化<br>土地沙漠化是一个全球性的环境问题。有历史记载以来，中国已有 1200 万公顷的土地变成了沙漠，特别是近 50 年来形成的 “现代沙漠化土地” 就有 500 万公顷。据联合国环境规划署（UNEP）调查，在撒哈拉沙漠的南部，沙漠每年大约向外扩展 150 万公顷。全世界每年有 600 万公顷的土地发生沙漠化。每年给农业生产造成的损失达 260 亿美元。从 1968 年到 1984 年，非洲撒哈拉沙漠的南缘地区发生了震惊世界的持续 17 年的大旱，给这些国家造成了巨大经济损失和灾难，死亡人数达 200 多万。沙漠化使生物界的生存空间不断缩小，已引起科学界和各国政府的高度重视。之前我们提出，气候变冷和构造活动变弱是沙漠化的主要原因，人类活动加速了沙漠化的进程。中国科学家对罗布泊的科学考察提供了不可辩驳的证据。<br>⑤缺氧<br>温室气体的摩尔质量均大于氧气，世界各国将地球内部的能量开采使用后，地球上最终的环境状态将会与地球在 10 亿年前的情况类似，届时野生动物与人类都将无法生存。</p><p>经济影响</p><p>全球有超过一半人口居住在沿海 100 公里的范围以内，其中大部分住在海港 附近的城市区域。所以，海平面的显著上升对沿岸低洼地区及海岛会造成严重的经济损害，例如：加速沿岸沙滩被海水的冲蚀、 地下淡水被上升的海水推向更远的内陆地方。<br>①农业<br>实验证明在 CO2 高浓度的环境下，植物会生长得更快速和高大。但是，‘全球变暖’的结果可能会影响大气环流，继 而改变全球的雨量分布与及各大洲表面土壤的含水量。由于未能清楚了解‘全球变暖’对各地区性气候的影响，以致对植物生态所产生的转变亦未能确定。<br>2011 年 5 月，美国史丹福大学（Stanford University）发表由洛克菲勒基金会（RockefellerFoundation）赞助的温室效应（GlobalWarming）研究指出，美国、加拿大及墨西哥的农产品，在全球气温上升之中，自 1980 年到 2011 年为止所受到影响不大。这是美国首次发表大气温度对农作物生产相关的研究报告。报告刊登在最新一 Science Express 杂志。<br>史丹福大学地球环境系统助教罗贝尔（David Lobell）表示，研究从 1980 年开始监看温室效应与农作物生产之间的关系。研究指出，自 1980 年以来，全球小麦生产下降了 5.5%，玉米生产下降 4%，全球稻米和黄豆则没有受到太大影响。<br>罗贝尔指出，美国是全球最大的玉米及黄豆生产国，约占全球生产的 40%，过去 30 年间并没有受到太大的温室效应影响。罗贝尔强调：“到目前为止没受到影响，未来十年则很难说。”<br> 罗贝尔表示，美国之外的地区如俄罗斯、法国、印度等国家的小麦；中国和巴西的玉米产量，在过去 30 年间的生产都下降。美国生产玉米及黄豆地区没有受到温室效果的影响，引起气候学家高度的兴趣，研究为何会不受到影响。「科学家重新检讨温室效应在全世界不同地区造成的影响，探讨是否有其它原因造成温室效应。」<br>罗贝尔指出，根据 “全球政府互联气候研究”（IPCC）自 1950 年开始的研究，地球气温平均每十年上升摄氏 0.13 度。IPCC 预测未来 20 到 30 年间，气温上升的更快，“如果这项预测属实，美加地区的农作物生产也将受到影响。”<br> 报告同时指出，因温室效应影响而减少的生产，使全球农作物价格自 1980 年到 2011 年为止上升了 20%。<br>②海洋生态<br>沿岸沼泽地区消失肯定会令鱼类，尤其是贝壳类的数量减少。河口水质变咸可会减少淡水鱼的品种数目，相反该地区海洋鱼类的 品种也可能相对增多。至于整体海洋生态所受的影响仍未能清楚知道。<br>③水循环<br>全球降雨量可能会增加。但是，地区性降雨量的改变则仍未知道。某些地区可有更多雨量，但有些地区的雨量可能会减少。此外 ，温度的提高会增加水份的蒸发，这对地面上水源的运用带来压力。<br>科学家预测：如果地球表面温度继续升高，到 2050 年全球温度将上升 2－4℃，南北极地冰山将大幅度融化，导致海平面大大上升，一些岛屿国家和沿海城市将淹于水中，其中包括几个著名的国际大城市：纽约，上海，东京和悉尼。<br>④男女比例失调<br>高温环境容易创造男宝宝，低温环境容易创造女宝宝。研究人员比较担心的是，在全球温度日益增高的温室效应下，男宝宝出生的机率会越来越高，可能会造成男女比例的失衡。<br>过去的研究早就发现，小老鼠和小蝙蝠的性别、出生时间、与环境温度有相当密切的关连性。为了找出人类宝宝的性别与环境温度的关系，德国研究人员则是针对 1946-1995 年间的出生记录进行追踪，并且对照当地的温度变化。结果发现，当地的四月到六月是男宝宝出生最多的月份，十月则是男宝宝出生最少的月份。<br>进一步的分析显示，受精卵结合前一个月的环境温度，也就是男生与女生在性行为发生前的一个月所处环境的温度，是影响宝宝性别的重要因素。高温环境容易创造男宝宝，低温环境容易创造女宝宝。<br>温度之所以会影响宝宝性别，研究人员的假设是：高温会影响精子的 X 染色体，让女宝宝不容易出生；低温会影响精子的 Y 染色体，让男宝宝不容易出生。<br>另一个假设则是：温度越高、做爱的欲望越强。高温的环境会刺激男女性行为频率的增加，也使得女性更容易受孕。<br>其它的研究则是认为，带有 Y 染色体的精子，游得比较快；但是带有 X 染色体的精子，比较强壮。所以在性行为频繁的状况下，带有 Y 染色体的精子比较容易与卵子结合，生出男宝宝。但是在性行为减少的状况下，带有 X 染色体的精子比较容易等到与卵子结合的机会，更容易生出女宝宝。<br>⑤农地积水疟疾肆虐<br>穿着传统服饰向来乐天知命的卡特瑞岛人，几百年来遗世独立，始终保持着传统生活模式，但他们却因人类对环境的破坏造成全球暖化，令他们将面临被海水淹没的命运。卡特瑞岛环保人士保罗塔巴锡说：“他们已经持续被海洋力量攻击，还有持续不断的洪水，原有的地区都被改变了，被破坏殆尽，几乎所有的地方都被海水淹没了。”<br> 不堪的是，招致蚊子苍蝇丛生，疟疾肆虐。<br>⑥亚马逊雨林逐渐消失<br>而位于南美洲、全世界面积最大的热带雨林 —— 亚马逊雨林正渐渐消失，让全球暖化危机雪上加霜。<br>号称地球之肺的亚马逊雨林涵盖了地球表面 5% 的面积，制造了全世界 20% 的氧气及 30% 的生物物种，由于遭到盗伐和滥垦，亚马逊雨林正以每年 7700 平方英里的面积消退，相当于一个新泽西州的大小，雨林的消退除了会让全球暖化加剧之外，更让许多只能够生存在雨林内的生物，面临灭种的危机，在过去的 40 年，雨林已经消失了两成。<br>⑦新的冰川期来临<br>全球暖化还有个非常严重的后果，就是导致冰川期来临。<br>南极冰盖的融化导致大量淡水注入海洋，海水浓度降低。“大洋输送带” 因此而逐渐停止：暖流不能到达寒冷海域；寒流不能到达温暖海域。全球温度降低，另一个冰河时代来临。北半球大部被冰封，一阵接着一阵的暴风雪和龙卷风将横扫大陆。</p><p>最终危害：可能会造成恐龙时代的再次降临！</p><p>⑧温室气体排放达临界值<br>据国际能源机构估计，2010 年有将近 306 亿吨二氧化碳被 “灌入” 大气中，在 2009 年时二氧化碳的含量就已经达到另人担忧的 1.6Gt，按照 2010 年的二氧化碳生产率，不久将会达到 “危险气候变化” 临界值，到时候全球气温将会上升 2 摄氏度，这种趋势是不可避免的了。据国际能源署（IEA）的权威经济学者表示，保持温度上升低于 2 摄氏度已经成为一个十分具有挑战性的事情，而且前景非常令人担忧。</p><h3 id="主要对策"><a class="markdownIt-Anchor" href="#主要对策">#</a> 主要对策</h3><p>全面禁用氟氯碳化物</p><p>实际上全球正在朝此方向推动努力，是以此案最具实现可能性。倘若此案能够实现，对于 2050 年为止的地球温暖化，根据估计可以发挥 3% 左右的抑制效果。</p><p>保护森林的对策方案</p><p>今日以热带雨林为主的全球森林，正在遭到人为持续不断的急剧破坏。有效的因应对策，便是赶快停止这种毫无节制的森林破坏，另一方面实施大规模的造林工作，努力促进森林再生。由于森林破坏而被释放到大气中的二氧化碳，根据估计每年约在 1～2gt. 碳量左右。倘若各国认真推动节制砍伐与森林再生计划，到了 2050 年，可能会使整个生物圈每年吸收相当于 0.7gt. 碳量的二氧化碳。具结果得以降低 7% 左右的温室效应。</p><p>汽车燃料的改善</p><p>日本汽车在此方面已获技术提升，大幅改善昔日那种耗油状况。但在美国等地，或许是因油藏丰富，对于省油设计方面，至今未见有何明显改善迹象，仍旧维持过度耗油的状况。因此，该地区生产的汽车在改善燃油设计方面，具有充分发挥的余地。由于此项努力所导致的化石燃料消费削减，估计到了 2050 年，可使温室效应降低 5% 左右。<br>改善能源使用效率<br>要改善其他各种场合的能源使用效率。今日人类生活，到处都在大量使用能源，其中尤以住宅和办公室的冷暖气设备为最。因此，对于提升能源使用效率方面，仍然具有大幅改善余地，这对 2050 年为止的地球温暖化，预计可以达到 8% 左右的抑制效果。如此一来，或许可以促使生产厂商及消费者在使用能源时有所警惕，避免作出无谓的浪费。而其税金收入，则可用于森林保护和替代能源的开发方面。</p><p>对化石燃料的限制</p><p>任何化石燃料一经燃烧，就会排放出二氧化碳来。惟其排放量会因化石燃料种类而有不同。由于天然瓦斯的主要成分为甲烷，故其二氧化碳排放量要比煤炭、石油为低。同样是要产生一千卡的热量，煤炭必须排放相当于 0.098 公克碳量的二氧化碳；这在石油则为 0.085 公克；若是换成天然瓦斯只需排放 0.056 公克即可。<br>因此，有人提案依照天然瓦斯、石油、煤炭的顺序予以加重课税。譬如生产方面，要对二氧化碳排放量较高的煤炭，以能量换算，每十亿焦耳课税 0.5 美元，而对天然瓦斯则只课税 0.23 美元。亦即二氧化碳排放量愈高的化石燃料课税愈重。至于消费方面的情形亦复加此，其课税比例在煤炭订为 23%，在天然瓦斯订为 13%。<br>当然，现今阶段只不过是有这么一个构想而已。但若果真付诸实行，可望对于 2050 年为止的地球温暖化，提供大约 5% 的抑制效果。</p><p>鼓励使用天然瓦斯</p><p>鼓励使用天然瓦斯作为主要能源。因为天然瓦斯较少排放二氧化碳。日本都市也都普遍改用天然瓦斯取代液化瓦斯，此案则是希望更进一步推广这种运动。惟其抑制温暖化的效果并不太大，顶多只有 1% 的程度左右。</p><p>汽机车的排气限制</p><p>由于汽机车的排气中，含有大量的氮氧化物与一氧化碳，因此希望减少其排放，这可以对到 2050 年为止的温暖化，分担 2% 左右的抑制效果。</p><p>鼓励使用太阳能</p><p>譬如推动所谓 “阳光计划” 之类。这方面的努力能使化石燃料用量相对减少，因此对于降低温室效应具备直接效果。不过，就算积极推动此项方案，对于 2050 年为止的温暖化，只具 4% 左右的抑制效果。其效果似乎未如人们的期待。</p><p>开发替代能源</p><p>利用生物能源 (Biomass Energy）作为新的干净能源。亦即利用植物经由光合作用制造出来的有机物充当燃料，藉以取代石油等既有的高污染性能源。<br>设法挖掘海洋吸收碳的潜力<br>作为地球上最大的碳吸收剂载体，海洋大约吸收了人类碳排放量的三分之一，减少了大气中的含量，延缓了<br>气候变化。其能力很大，潜力也很大。海洋中还存在大面积的 “荒漠化” 区域，区域内海水中生物量很少，在这些区域，可设法，如利用海水温差、风能或波浪能发电，将富含营养的低温深层海水抽到海面，可大大促进浮游生物的繁殖，人为营造大量的海洋牧场，进而提高鱼、虾、贝类等的产出，它们死后，部分尸体会沉入海底，这就相当于增加了海洋吸收碳的能力。这是非常困难问题。总之那些化学能是出自太阳能非常有限无法满足人类社会向前进步的需要。<br>此外，温室气体源，进行分类，煤炭，石油，天然气等，都是地球表面上的植物把他们固定的固态形状以后，再被大规模地壳运动带到地下去经过长期埋藏以后演变的。其中的煤炭极有可能是植物的尸体，石油极有可能是动物的尸体。所以石油、天然气、煤炭都是绝对不可再生能源。可燃冰在太阳没有熄灭之前是可再生能源。<br>燃烧生物能源也会产生二氧化碳，这点固然是和化石燃料相同，不过生物能源系从大自然中不断吸取二氧化碳作为原料，故可成为重覆循环的再生能源，达到抑制二氧化碳浓度增长的效果。<br>“温室效应” 是指地球大气层上的一种物理特性。假若没有大气层，地球表面的平均温度是 - 18℃。这温度上的差别是由于一类名为温室气体所引致，这些气体吸收红外线辐射而影响到地球整体的能量平衡。在现况中，地面和大气层在整体上吸收太阳辐射後能平衡于释放红外线辐射到太空外。但受到温室气体的影响，大气层吸收红外线辐射的份量多过它释放出到太空外，这使地球表面温度上升，此过程可称为‘天然的温室效应’。但由于人类活动释放出大量的温室气体，结果让更多红外线辐射被折返到地面上，加强了 “温室效应” 的作用。<br>太阳总辐射量（240W/㎡）和红外线的释放量应要均等。其中约三分之一（103W/㎡）的太阳辐射会被反射而馀下的会被地球表面所吸收。此外，大气层的温室气体和云团吸收及再次释放出红外线辐射，使到地面更暖，高出约 33℃。<br>地球孕育了人类，人类也在不断地改造地球。人类的发展史，归根结底是人类艰苦奋斗的创业史。在创业过程中，人们利用各种能源赖以生存，同时也给他们带来了不同程度的破坏。有人预言，人类最终是毁灭在自己创造的文明中。“资源短缺” 已成为广大群众一个十分关注的问题。总有一天能源会被我们用尽，人类就无法生存。如今，许多人们不懂得如何珍惜仅有的能源。大量用水、用电，许多破坏臭氧层的物品也消耗飞速，排放的废气已经多得难以让人想象…… 造成这一切后果的是谁？就是我们人类。要做到节能减排，就要从小事做起，人人动起手来，创建美好的家园。以下几点为可行的建议：<br>一、节约电能。要注意随手关灯，可以使用高效节能灯泡。据美国的能源部门估计，使用高效节能灯泡代替传统电灯泡，就能避免四亿吨二氧化碳被释放。除了电灯，在使用其它电器方面也要注意，尽量选择低消耗节能产品，不用电器时要切断或关掉电源，冰箱则让它处于无霜状态。夏季天气不算十分炎热时，最好用扇子或电风扇代替空调。使用空调时，不要把温度调得太低，26℃左右就行了。<br>二、节约水资源。许多废水都可以循环使用。洗脸、洗手、洗菜、洗澡、洗衣服的水都可以收集起来擦地板、冲厕所、浇花等。淘米水则是很好的去污剂，可以留下来洗碗筷。沾了油的锅和盘子要先用用过的餐巾纸擦干净，洗起来节水有方便，还可以少用洗洁精，减少水污染。<br>三、节约用纸。纸张的循环再利用，可以避免从垃圾填埋地释放出来的沼气，还能少砍伐树木。据统计，回收一吨废纸能产生 800 千克的再生纸，可以少砍 17 棵大树，节约用纸就是保护森林资源，保护环境。<br>四、减少废气排放。交通废气和工业废气是生活废气的主要来源。我们出门尽量乘坐公共汽车或出租车，还可以骑自行车，尽量少乘坐私家车。工厂里的燃烧垃圾、生产商品等而产生的大量滚滚的浓烟弥漫在城市里。他们应该把废气经过加工和过滤，再排放出来就可以减少污染。植物可以吸收二氧化碳，然后释放出氧气，所以我们要大量的种树，尤其是在公路旁。<br>五、垃圾分类处理。垃圾分类可以回收宝贵的资源，同时减少填埋和焚烧垃圾所消耗的能源。例如：废纸被直接送到造纸厂，用以生产再生纸；饮料瓶、罐子和塑料等一次性物品也可以送到相关的工厂，成为再生资源；家用电器可以送到专门的厂家进行分解回收。家里可以准备不同的垃圾袋，分别收集废纸、塑料、包装盒等，每天进行垃圾分类和回收，尽量做到 “变废为宝”。全球变暖给我们敲响了警钟，地球正面临着巨大的挑战。保护地球，就是保护我们的家。让我们行动起来，节能减排，挽救地球家园的命运，维护人类的一个继续生存的未来。</p><h3 id="个人想法"><a class="markdownIt-Anchor" href="#个人想法">#</a> 个人想法</h3><p>我曾见过一条视频说制作了一盏灯是用叶绿素制作，可以进行光合作用，可以向这个方向尝试，一家之言</p>]]></content>
      
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepDream初解</title>
      <link href="2021/05/12/deepdream/"/>
      <url>2021/05/12/deepdream/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h3><p>今天我學習了一個叫 DeepDream 的技術，很魔幻<br> DeepDream 是一种让机器修改图像技术，它利用卷积神经网络，可以作出很迷幻的圖像</p><p>由於這個模型訓練室加入了大量的狗和鳥的圖片所以會有明顯的形象</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码">#</a> 代码</h3><p>給出個代碼，最後解釋過程的思路</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 不使用及时执行模式</span><span class="token comment"># See https://github.com/tensorflow/tensorflow/issues/33135</span><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tftf<span class="token punctuation">.</span>compat<span class="token punctuation">.</span>v1<span class="token punctuation">.</span>disable_eager_execution<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 加载预训练的 Inception V3 模型</span><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>applications <span class="token keyword">import</span> inception_v3<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras <span class="token keyword">import</span> backend <span class="token keyword">as</span> KK<span class="token punctuation">.</span>set_learning_phase<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>model <span class="token operator">=</span> inception_v3<span class="token punctuation">.</span>InceptionV3<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">'imagenet'</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 输出 Inception V3 模型的结构，在其中选择层</span><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tftf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>plot_model<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一段的代碼我覺的我挺有發言權的，因爲這段代碼，讓我浪費了大量的時間<br>原本這次的深度學習是用 TensorFlow2.0 版本的，但是目前最新的版本早就過了 2.0，這導致了不兼容的問題出現</p><p>題外話，其實不但是 TensorFlow，numpy 也有不兼容的問題，其根本原因是底層代碼的變動導致<br>所以深度學習的不兼容問題會有很多，TensorFlow 也只是 2018 年才出版的，更新速度快，底層代碼變動大，也就容易理解了</p><p>第二段的代碼，在註釋上就有解釋了，這是加載模型的代碼<br>第三段代碼我找到了一段解釋</p><pre class="line-numbers language-none"><code class="language-none">DeepDream 中，我们要同时将多个层的所有过滤器激活最大化。具体的实现是：对一组靠近顶部的层激活的 L2 范数进行加权求和，然后求出这个值的最大化。层的选择、以及权重分配对生成的结果影响很大：靠近底部的层会生成基本的几何图案；靠近顶部的层会生成能够看出某些物品的图像（ImageNet 中的图案，比如鸟或狗）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># DeepDream 配置</span>layer_contributions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'mixed4'</span><span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>    <span class="token string">'mixed5'</span><span class="token punctuation">:</span> <span class="token number">3.0</span><span class="token punctuation">,</span>    <span class="token string">'mixed6'</span><span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">,</span>    <span class="token string">'mixed7'</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這段代碼的更改其中的數據可以獲取更加複雜的圖案</p><p>求对于这些被选中层的损失：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义需要最大化的损失</span>layer_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>name<span class="token punctuation">,</span> layer<span class="token punctuation">)</span> <span class="token keyword">for</span> layer <span class="token keyword">in</span> model<span class="token punctuation">.</span>layers<span class="token punctuation">]</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> K<span class="token punctuation">.</span>variable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">for</span> layer_name <span class="token keyword">in</span> layer_contributions<span class="token punctuation">:</span>    coeff <span class="token operator">=</span> layer_contributions<span class="token punctuation">[</span>layer_name<span class="token punctuation">]</span>    activation <span class="token operator">=</span> layer_dict<span class="token punctuation">[</span>layer_name<span class="token punctuation">]</span><span class="token punctuation">.</span>output        scaling <span class="token operator">=</span> K<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>K<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>K<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>activation<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># loss += coeff * K.sum(K.square(activation[:, 2: -2, :])) / scaling</span>    <span class="token comment"># 应该用下面的代码👇。参考：https://github.com/fchollet/deep-learning-with-python-notebooks/issues/43</span>    loss <span class="token operator">=</span> loss <span class="token operator">+</span> coeff <span class="token operator">*</span> K<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>K<span class="token punctuation">.</span>square<span class="token punctuation">(</span>activation<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> scaling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对损失做梯度上升：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 梯度上升过程</span>dream <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token builtin">input</span>grads <span class="token operator">=</span> K<span class="token punctuation">.</span>gradients<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> dream<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>grads <span class="token operator">/=</span> K<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>K<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>K<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>grads<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span>outputs <span class="token operator">=</span> <span class="token punctuation">[</span>loss<span class="token punctuation">,</span> grads<span class="token punctuation">]</span>fetch_loss_and_grads <span class="token operator">=</span> K<span class="token punctuation">.</span>function<span class="token punctuation">(</span><span class="token punctuation">[</span>dream<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">eval_loss_and_grads</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    outs <span class="token operator">=</span> fetch_loss_and_grads<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>    loss_value <span class="token operator">=</span> outs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    grad_values <span class="token operator">=</span> outs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> loss_value<span class="token punctuation">,</span> grad_values<span class="token keyword">def</span> <span class="token function">gradient_ascent</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> iterations<span class="token punctuation">,</span> step<span class="token punctuation">,</span> max_loss<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss_value<span class="token punctuation">,</span> grad_values <span class="token operator">=</span> eval_loss_and_grads<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> max_loss <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> loss_value <span class="token operator">&gt;</span> max_loss<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'   loss value at </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>loss_value<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        x <span class="token operator">+=</span> step <span class="token operator">*</span> grad_values    <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 辅助函数</span><span class="token keyword">import</span> scipy<span class="token keyword">import</span> imageio<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> image<span class="token keyword">def</span> <span class="token function">resize_img</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    factors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token builtin">float</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token builtin">float</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> scipy<span class="token punctuation">.</span>ndimage<span class="token punctuation">.</span>zoom<span class="token punctuation">(</span>img<span class="token punctuation">,</span> factors<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_img</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> fname<span class="token punctuation">)</span><span class="token punctuation">:</span>    pil_img <span class="token operator">=</span> deprocess_image<span class="token punctuation">(</span>np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># scipy.misc.imsave(fname, pil_img)</span>    imageio<span class="token punctuation">.</span>imsave<span class="token punctuation">(</span>fname<span class="token punctuation">,</span> pil_img<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">preprocess_image</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    用于打开图像，改变图像大小，并将图像格式转换为 Inception V3 模型能够处理的张量    '''</span>    img <span class="token operator">=</span> image<span class="token punctuation">.</span>load_img<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    img <span class="token operator">=</span> image<span class="token punctuation">.</span>img_to_array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    img <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>img<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> inception_v3<span class="token punctuation">.</span>preprocess_input<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    <span class="token keyword">return</span> img<span class="token keyword">def</span> <span class="token function">deprocess_image</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将一个张量转换为有效图像    '''</span>    <span class="token keyword">if</span> K<span class="token punctuation">.</span>image_data_format<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'channels_first'</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            x <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">.</span>    x <span class="token operator">+=</span> <span class="token number">0.5</span>    x <span class="token operator">*=</span> <span class="token number">255</span><span class="token punctuation">.</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'uint8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 辅助函数</span><span class="token keyword">import</span> scipy<span class="token keyword">import</span> imageio<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> image<span class="token keyword">def</span> <span class="token function">resize_img</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    factors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token builtin">float</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token builtin">float</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> scipy<span class="token punctuation">.</span>ndimage<span class="token punctuation">.</span>zoom<span class="token punctuation">(</span>img<span class="token punctuation">,</span> factors<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_img</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> fname<span class="token punctuation">)</span><span class="token punctuation">:</span>    pil_img <span class="token operator">=</span> deprocess_image<span class="token punctuation">(</span>np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># scipy.misc.imsave(fname, pil_img)</span>    imageio<span class="token punctuation">.</span>imsave<span class="token punctuation">(</span>fname<span class="token punctuation">,</span> pil_img<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">preprocess_image</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    用于打开图像，改变图像大小，并将图像格式转换为 Inception V3 模型能够处理的张量    '''</span>    img <span class="token operator">=</span> image<span class="token punctuation">.</span>load_img<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    img <span class="token operator">=</span> image<span class="token punctuation">.</span>img_to_array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    img <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>img<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> inception_v3<span class="token punctuation">.</span>preprocess_input<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    <span class="token keyword">return</span> img<span class="token keyword">def</span> <span class="token function">deprocess_image</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将一个张量转换为有效图像    '''</span>    <span class="token keyword">if</span> K<span class="token punctuation">.</span>image_data_format<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'channels_first'</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            x <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">.</span>    x <span class="token operator">+=</span> <span class="token number">0.5</span>    x <span class="token operator">*=</span> <span class="token number">255</span><span class="token punctuation">.</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'uint8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在多个连续尺度上运行梯度上升</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npstep <span class="token operator">=</span> <span class="token number">0.01</span>     <span class="token comment"># 梯度上升的步长</span>num_octave <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment"># 尺度个数</span>octave_scale <span class="token operator">=</span> <span class="token number">1.4</span> <span class="token comment"># 两个尺度的大小比例</span>iterations <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment"># 在每个尺度上运行梯度上升的步数</span>max_loss <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">.</span>  <span class="token comment"># 损失上升的太大时中止梯度上升，以免得到丑陋的伪影</span>base_image_path <span class="token operator">=</span> <span class="token string">'./img.png'</span>img <span class="token operator">=</span> preprocess_image<span class="token punctuation">(</span>base_image_path<span class="token punctuation">)</span>original_shape <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>successive_shapes <span class="token operator">=</span> <span class="token punctuation">[</span>original_shape<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_octave<span class="token punctuation">)</span><span class="token punctuation">:</span>    shape <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span>dim <span class="token operator">//</span> <span class="token punctuation">(</span>octave_scale <span class="token operator">**</span> i<span class="token punctuation">)</span>                  <span class="token keyword">for</span> dim <span class="token keyword">in</span> original_shape<span class="token punctuation">]</span><span class="token punctuation">)</span>    successive_shapes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>shape<span class="token punctuation">)</span>successive_shapes <span class="token operator">=</span> successive_shapes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>original_img <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>img<span class="token punctuation">)</span>shrunk_original_img <span class="token operator">=</span> resize_img<span class="token punctuation">(</span>img<span class="token punctuation">,</span> successive_shapes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> shape <span class="token keyword">in</span> successive_shapes<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Processing image shape'</span><span class="token punctuation">,</span> shape<span class="token punctuation">)</span>    img <span class="token operator">=</span> resize_img<span class="token punctuation">(</span>img<span class="token punctuation">,</span> shape<span class="token punctuation">)</span>    img <span class="token operator">=</span> gradient_ascent<span class="token punctuation">(</span>img<span class="token punctuation">,</span>                          iterations<span class="token operator">=</span>iterations<span class="token punctuation">,</span>                          step<span class="token operator">=</span>step<span class="token punctuation">,</span>                          max_loss<span class="token operator">=</span>max_loss<span class="token punctuation">)</span>    upscaled_shrunk_original_img <span class="token operator">=</span> resize_img<span class="token punctuation">(</span>shrunk_original_img<span class="token punctuation">,</span> shape<span class="token punctuation">)</span>    same_size_original <span class="token operator">=</span> resize_img<span class="token punctuation">(</span>original_img<span class="token punctuation">,</span> shape<span class="token punctuation">)</span>    lost_detail <span class="token operator">=</span> same_size_original <span class="token operator">-</span> upscaled_shrunk_original_img        img <span class="token operator">+=</span> lost_detail    shrunk_original_img <span class="token operator">=</span> resize_img<span class="token punctuation">(</span>original_img<span class="token punctuation">,</span> shape<span class="token punctuation">)</span>    save_img<span class="token punctuation">(</span>img<span class="token punctuation">,</span> fname<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'dream_at_scale_</span><span class="token interpolation"><span class="token punctuation">{</span>shape<span class="token punctuation">}</span></span><span class="token string">.png'</span></span><span class="token punctuation">)</span>    save_img<span class="token punctuation">(</span>img<span class="token punctuation">,</span> fname<span class="token operator">=</span><span class="token string">'final_dream.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所謂的初解還沒有理解透，希望有朝一日能夠學明白 ——2021.5.12<br> 不過我的代碼運行成功了，以下是奇幻的世界<br><img src="https://ftp.bmp.ovh/imgs/2021/05/62eb483e4e2eda57.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/05/60926755a866d54e.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/05/9ae88d1abc33b1c2.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/05/914c3a963f14edf6.png" alt=""></p><h3 id="过程"><a class="markdownIt-Anchor" href="#过程">#</a> 过程</h3><p>最初发布的 DeepDream 中使用的卷积神经网络是一个 Inception 模型，在实践中，人们已经知道 Inception 能够生成漂亮的 DeepDream 图像，所以我们将使用 Keras 内置的 Inception V3 模型。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷積初解</title>
      <link href="2021/05/12/convolution-initial-solution/"/>
      <url>2021/05/12/convolution-initial-solution/</url>
      
        <content type="html"><![CDATA[<p>卷積神經網絡是個經典的神經網絡，可以讓神經網絡所使用的算力減小</p><h3 id="卷积层"><a class="markdownIt-Anchor" href="#卷积层">#</a> 卷积层</h3><p>假設一個 3<em>3 的矩陣作爲卷積核，與 7</em>7 的矩陣做卷積運算，會得到一個 5*5 的卷積矩陣</p><p>建議在做矩陣運算的那個矩陣邊緣加一層空白的數<br>這樣可以將矩陣的邊緣得到注意</p><h3 id="池化层"><a class="markdownIt-Anchor" href="#池化层">#</a> 池化层</h3><p>池化層是卷積層的下一層，用於簡化矩陣<br> 2<em>2 最大池化層就是將矩陣的其中 2</em>2 提取出來，其中沒有重疊<br>平均池化層則是取被提取出來的矩陣中的平均數</p><p>池化层将矩阵缩小，放大特征<br>过滤器大小 f，步幅 s，通常使用 2*2 矩阵，并且通常使用最大池化层</p><h3 id="卷积矩阵"><a class="markdownIt-Anchor" href="#卷积矩阵">#</a> 卷积矩阵</h3><p>有一个 224<em>224 的矩阵，卷积层为 222</em>222 的矩阵，因为池化层要折半，故池化层为 111*11 的矩阵继而转入下一个卷积层</p><p>在代碼部分有些是要注意的，比如有個壓平矩陣的函數在訓練師要適當加入，圖像識別就要加</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>512</title>
      <link href="2021/05/12/512-2021/"/>
      <url>2021/05/12/512-2021/</url>
      
        <content type="html"><![CDATA[<p>512 了，整整 13 年了，回想起曾經我還是個少年，回憶起來，當初的我還在期待着北京奧運會，而先到的卻是這一則消息，默哀<br><img src="https://ftp.bmp.ovh/imgs/2021/05/5de183ee206e5e07.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬蟲</title>
      <link href="2021/05/11/reptile/"/>
      <url>2021/05/11/reptile/</url>
      
        <content type="html"><![CDATA[<p>爬蟲是我的夢想之一，像一名黑客一樣多酷</p><h3 id="requests"><a class="markdownIt-Anchor" href="#requests">#</a> Requests</h3><p>使用 python 的 requests 這個第三方庫可以進行爬蟲的爬取</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pip <span class="token function">install</span> requests$ pip --default-timeout<span class="token operator">=</span><span class="token number">1000</span> <span class="token function">install</span> requests$ pip --default-timeout<span class="token operator">=</span><span class="token number">1000</span> <span class="token function">install</span> requests -i https://pypi.tuna.tsinghua.edu.cn/simple% pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>requests 庫下載<br>超時的時候設置安裝時間<br>追加設置清華源<br>配置默認鏡像站 —— 這是清華源的鏡像</p><p>下面給出最簡單的代碼例子，看幾眼就會了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.19 Safari/537.36 Edg/91.0.864.11'</span><span class="token punctuation">}</span>url <span class="token operator">=</span> <span class="token string">'http://www.bilibili.com'</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>append_encoding<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>請求頭是 headers，get () 函數接上路徑，獲取網站內容<br> raise_for_status () 用於查看狀態碼，在交互式中是 r.status_code，返回 200 正常<br> r.encoding 編碼改爲 UTF-8<br>r.text 輸出全部內容</p><h3 id="bs4"><a class="markdownIt-Anchor" href="#bs4">#</a> bs4</h3><p>bs4 庫是個好東西，我們用其中的 BeautifulSoup 庫</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupdemo <span class="token operator">=</span> r<span class="token punctuation">.</span>textsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>demo<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這一上的代碼可以讓你的輸出變成 HTML 格式的寫法，不會亂團團的<br> soup.a.children 等代碼是遍歷文檔樹的寫法</p><p>建議去 BeautifulSoup 的中文文檔查看更多的用法</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>製作類空調機器</title>
      <link href="2021/05/11/manufacturing-air-conditioning-machine/"/>
      <url>2021/05/11/manufacturing-air-conditioning-machine/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h3><p>在夏天我們的身邊就熱的像是被烤熟了一般，所以我在這裡記錄一下想法<br>空調是我們必不可少的家居用品，雖然我只配用電風扇<br>古代使用扇子或大樹作爲乘涼的方法，近代發明了電風扇，再到現在的我們現在享受的空調<br>時代都是在與時俱進的，無論是扇子空調都是每個時代的乘涼工具的主角，我不幻想我能做出什麼新穎的工具讓所有人都用，我現在只希望我能做的出來，而不是半途而廢<br>我太瞭解我自己了，即便是做這個 hexo 博客網站時也總是想着放棄</p><h3 id="理論"><a class="markdownIt-Anchor" href="#理論">#</a> 理論</h3><p>我們先提出問題，溫度爲什麼會上升和下降呢<br>這個問題我已經忘記答案了，不過我還是找到了結果<br>如果是独立的密闭空间里面，温度升高，分子运动更剧烈，液体水挥发变成水蒸气，单位空间里的水分子数量变多，湿度就大。<br>如果是在和外部相通的空间里，温度升高，把小空间内的水蒸气稀释到外部，内部小空间的湿度就会变低。<br>這個答案就是說溫度是由粒子造成的，這讓我不由得想起了閃電<br>那麼我們想降低溫就要擴展空間，但是地球那麼大也是有限度的，所以 pass<br> 第二條說的是增加水的溼度，就像大海一樣，但人能像魚一樣有鰓嗎，所以 pass</p><p>我找到了一份資料可以進行參考<br><img src="https://ftp.bmp.ovh/imgs/2021/05/2dbe03a1832b0c78.jpg" alt=""></p><p>這一篇文章看上去不錯，但是還是有不少的缺點<br>這種材料算是一種膜</p><p>膜法師？</p><p>我認爲這種材料的缺點不但是不乾淨的問題，還有破損的問題<br>不過我發現了一個新的東西 —— 熱輻射</p><p>热辐射，是物体由于具有温度而辐射电磁波的现象。是一种物体用电磁辐射的形式把热能向外散发的热传方式。它不依赖任何外界条件而进行。它是热的三种主要传导方式之一。 一切温度高于绝对零度的物体都能产生热辐射，温度愈高，辐射出的总能量就愈大，短波成分也愈多。</p><p>說道熱輻射，不能不說一下熱的傳導方式</p><p>热传导是介质中无宏观运动的导热方式，固液气介质中均可发生，比如铁板鱿鱼<br>热对流是流体中由于流体流动产生的导热方式，同时会伴随着热传导，比如冰箱的冷凝管<br>热辐射是物体由于有温度而辐射电磁波产生的导热方式，可以在真空中传热，比如太阳向地球传热这<br>三种常常同时出现，比如炉边烤火既有温度导致的热辐射，也有冷热空气流动产生的热对流，还有空气自身热运动导致的热传导</p><p>根據我們查到的資料視乎想解決熱的問題有點難度，不過先總結一下方法<br>熱傳導的問題只需要找到隔熱材料<br>熱對流的問題是個難點，空調的降溫方式沒有解決熱對流的問題，所以說整天待在空調房是對人身體不好<br>熱輻射的問題不能輕易的解決因爲人體就有熱輻射，故只能降低</p><p>不過我現在只能提供一篇有好的思路的文章，這樣的議論知識就該完整了，接下來看實踐了<br><img src="https://ftp.bmp.ovh/imgs/2021/05/53a0f6157dbd9c33.jpg" alt=""></p><h3 id="製作"><a class="markdownIt-Anchor" href="#製作">#</a> 製作</h3><p>還沒有想好怎麼製作，敬請期待！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 讨论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网教程</title>
      <link href="2021/05/11/science-online-course/"/>
      <url>2021/05/11/science-online-course/</url>
      
        <content type="html"><![CDATA[<p>這一份教程用於教授你如何科學的上網</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ https://vpswala.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這個網站有可以白嫖的資源<br><img src="https://ftp.bmp.ovh/imgs/2021/05/620812af0ab462a5.png" alt=""><br>看見那個 $00.00 的頁面嗎，給老子立刻白嫖！<br><img src="https://ftp.bmp.ovh/imgs/2021/05/cdf2e005e128bb73.png" alt=""><br>注意選擇的是網站託管，請不要選錯了，下面有個免費託管計劃<br>對了記得註冊和登錄<br>註冊新域後點擊右邊的購買即可，隨後登錄郵箱查看發給你的郵件<br><img src="https://ftp.bmp.ovh/imgs/2021/05/5c537697b7cb6925.png" alt=""><br>对了如果在腾讯或阿里购买过域名进去选择第三行，输入域名<br>郵件中的幾個信息很重要，Server IP:62.171.172.114<br> 這是 ftp 的地址，还有注意 Usemame，这是你的用户名，千万注意了，以后改的时候记得看一下<br>接着在你的瀏覽器中安裝插件，我用的是 edge，Chrome 的也是大同小異罷了<br>在賬戶下有個擴展搜索 proxy，插件結果如下<br><img src="https://ftp.bmp.ovh/imgs/2021/05/bac7a67002346119.png" alt=""><br>一下圖片是必須改成的結果<br><img src="https://ftp.bmp.ovh/imgs/2021/05/d5376a1ae3371630.png" alt=""><br>端口 1080 是自己改的，用一个当前没有的端口，比如说 8080 也可以，不知道端口有没有被占用可以用命令查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> -tlpn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在～/.bashrc 中配置文件，通常 Java 等环境配置都在其中完成的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> ~/.bashrc$ <span class="token builtin class-name">alias</span> <span class="token assign-left variable">us_socks</span><span class="token operator">=</span><span class="token string">"ssh -NfD 1080 kinomoto@62.171.172.114"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 1080 是端口，kinomoto 是用户名，@后面一串是服务 IP<br> 最後在打開時，記得在終端輸入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">us_socks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然会需要密码，于是我们开始下一步，免密码代理</p><p>## 免密码代理<br>首先需要公钥，输入命令可得<br><img src="https://ftp.bmp.ovh/imgs/2021/10/0cdf9c7dcb0208de.png" alt=""><br>其中有句话表明了公钥的位置<br> Your identification has been saved in /home/yuban/.ssh/id_rsa.<br>Your public key has been saved in /home/yuban/.ssh/id_rsa.pub.<br> 所以就要去寻找 id_rsa.pub<br><img src="https://ftp.bmp.ovh/imgs/2021/10/b8892a24c2688655.png" alt=""><br> 最备好公钥就去 vps 网站上找后台输入公钥即可<br>在我的服务中找到购买的网站，在左侧边栏中点击，登录 cPanel<br><img src="https://ftp.bmp.ovh/imgs/2021/10/7d8930e9e3d3a82f.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/10/bbb035d9fb70626e.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/10/b8ba10002427ebad.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/10/cab136f87e9f624b.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/10/ad8392a9ab8559de.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/10/a911f30e0926c1b8.png" alt=""><br><img src="https://ftp.bmp.ovh/imgs/2021/10/99da13690f6493d9.png" alt=""><br> 最后一步是运行前面配置文件，由于我的运行代理的命令是 us_socks，所以要看个人的配置文件里的命令，不要告诉我你不知道，命令是你自己弄得还会不知道，不会吧，真傻<br>如果键入命令要求输密码那要看看你是否有设置密码，设置密码实在你获取公钥的时候设置的，不设置密码那时候是直接按回车的<br>最终的命令运行完结果后会出现这样的语句<br><img src="https://ftp.bmp.ovh/imgs/2021/10/2e057684344f1303.png" alt=""></p><p>##PS<br> 人总是要成长的 2021 年 10 月 21 日我第一次修改博客，第一次自己一人独自完成制作代理，虽然有嘉鸿帮衬</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客網站學習筆記</title>
      <link href="2021/05/10/learning-notes-of-hexo-blog-website/"/>
      <url>2021/05/10/learning-notes-of-hexo-blog-website/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo的学习"><a class="markdownIt-Anchor" href="#hexo的学习">#</a> hexo 的学习</h3><p>我與大佬搞了兩個多小時終於將網站的推送問題給解決了，大佬累不累我不知道，但是我累了。<br>我真的是睏得要死，我先休息一下，爭取早日完成這一篇我真正意義上的博客。<br>記錄一下，現在是 2：40，加油！<br>所實話這次是真的對我來說很難，我花費了整整一天的時間將網站的創建學會，hexo 的文檔說實話很亂，幾句代碼居然弄出了一份不知道幾千幾萬字的文檔，我從開始創建網站開始積攢的知識都覺得快憋不住了，就快忘了。<br>以下即是我在 hexo 的學習總結。</p><h2 id="網站製作"><a class="markdownIt-Anchor" href="#網站製作">#</a> 網站製作</h2><p>網站的製作很簡單只有三行代碼</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span> <span class="token comment"># &lt;folder&gt;是你建站的文件夾的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span> <span class="token comment"># cd到建站的目錄</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 使用npm創建網站</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上便是建站的三條代碼，不過只用這三條代碼就能夠建站，那你就可太天真了，因為你還有前置的條件沒有準備，你的 Node.js 安裝了嗎，Git，npm 這些都安裝了嗎，接下來就是教程了。</p><h2 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs">#</a> Node.js</h2><p>安裝 Node.js 時十分的痛苦，我第一次搞就是 Node.js 的版本過舊導致後面的生成靜態網頁失敗報錯，所以 Node.js 需要最新的版本.<br> 方法一：直接上官網，官網會根據瀏覽器的請求頭識別操作系統，進而推薦合適的安裝包，如果要用其他系統的安裝包，在 HOME 附近有個 DOWNLOADS 的標籤，進去就能下載，一定要下載二進制文件<br>方法二：使用 nvm。這個是大佬幫我弄的，說是這個可以安裝最新版的，我也搜索了資料</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh <span class="token operator">|</span> <span class="token function">bash</span>$ <span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>這兩行代碼是安裝與運行命令，接下來配置文件，在<sub> /.bash_profile，</sub>/.zshrc，<sub>/.profile，或</sub> /.bashrc 中，當然只是其中一個文件，你不可能有三個吧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token punctuation">[</span> -a <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME-}</span>"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> %$ <span class="token string">"{HOME}/.nvm || printf %$ "</span>$<span class="token punctuation">{</span>XDG_CONFIG_HOME<span class="token punctuation">}</span>/nvm"<span class="token variable">)</span></span>"</span>$ <span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">|</span><span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>該死，竟然不用！<br>這個配置文件居然是安裝好的就能自動配置，還好有大佬指點，聽大佬說這命令安裝的很慢，建議上 gitee 的 nvm 上用網站的，直接克隆，放代碼！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://gitee.com/mirrors/nvm.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接著就運行下面的 install.sh 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>node.js 安裝代碼</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nvm <span class="token function">install</span> --lts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用–lts 可以安裝最新版本的 node.js，如果沒有那就是什麼版本就不好說了<br>除了 Node.js 外還有 Git<br> 安裝 Git，並執行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.email <span class="token string">"you@example.com"</span>$ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>$ ssh-keygen -t rsa -C <span class="token string">"your_email@youremail.com"</span>$ <span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>複製 ssh 密匙到 Github 中的 SSH and GPG keys 填寫 Key</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這樣便登錄上 Git</p><h2 id="網站测试"><a class="markdownIt-Anchor" href="#網站测试">#</a> 網站测试</h2><p>上面有建站所需三條代碼，我也不多說了，忘了就往上翻一翻吧，我們繼續往下講<br>安裝主題，在 hexo 中有主題的模版，可以自己下載，我也不多說，喜歡哪個就下載哪個，我是使用 matery 的，不過代碼在 csdn 中也有修改代碼，<a href="http://xn--materycsdn-sj2pk11bj5bo36jbhvc7dyb9s5av4lx9f.net">不是 matery 的請自動跳轉到 csdn.net</a><br> 修改代碼過多，並且 csdn 也有許多 matery 的修改例子，我也就說一下自己郵箱深刻的吧<br>在首頁的圖片是一天一換的還可以修改為每小時或每分鐘一換，也只是改代碼，但是我改了非但不行而且圖片變成純白一片了，這是因為每小時的要 24 張圖片，每分鐘的要 60 張圖片，本人還沒有學習 javascript 實在是慚愧，出現了如此低級錯誤<br>搞定了自己理想的網頁便是在自己的電腦上運行一下，看看結果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server <span class="token comment">#可縮寫為hexo s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上是運行的命令，點擊位數為 4000 的網頁進去查看<br>如果符合自己的要求就要部署到網上了，接著就到了令人痛苦的時間了，反正我是被卡的不要不要的</p><h2 id="網站上線"><a class="markdownIt-Anchor" href="#網站上線">#</a> 網站上線</h2><p>接著先給出三條代碼</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server <span class="token comment">#可縮寫為hexo s</span>$ hexo generate <span class="token comment">#可縮写為hexo g</span>$ hexo deploy <span class="token comment">#可縮写為hexo d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>這三行代碼是試運行，生成靜態網頁，上線</p><p>或許這裡你不知道 GitHub 上傳文件你不知道，那就執行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> 要上傳的文件夾裡面$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>$ <span class="token function">git</span> commit -m <span class="token string">"提交文件"</span> <span class="token comment">#雙引號內是提交註釋</span>$ <span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/你打代碼廠庫/blog.git$ <span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做到這裡就差不多結束了</p><p>注意在更目錄下的_config.yml 中 deploy 有沒有更改填入代理的網站，如果沒填就無法上線<br><img src="https://ftp.bmp.ovh/imgs/2021/05/66b694349ded7141.png" alt=""></p><p>通常來說 hexo 已經是沒有問題了，至於你的生成靜態網頁的報錯自己看看報錯點，很容易就可以改好，不過報錯過多那就重新做過吧<br>我們接著上線需要一個代理，國內有 coding，國際有 github，雖然 github 訪問不穩定，但我還是要建議使用 github<br> 我的上線問題是個大疑難，我只好呼叫大佬<br>區區一個上限問題居然難了我們很久，大佬最後說不要用 github 的，太慢了，用 coding 的吧，這是國內的代理網站<br>大佬將我當成工具人反復利用掃碼，終於解決了，因為自從被騰訊收購後，coding 從免費代理變成要收費了，白嫖不香嗎？<br>所以我們又回到了 github 中，大佬終於忍不住將 host 更改，為 github 提速，使得 github 在我的電腦上重見天日<br>大佬是使用 utools 修改的，沒有安裝這個插件的小夥伴就使用下面的代碼更改吧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vi</span>  /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最後重啟一下服務就行了<br>在我們正為代理不上去的問題發愁時，大佬又想起了那個被白嫖過的服務器，好傢伙這是割韭菜</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ https://vpswala.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>這個網站據說是德國的服務器，能免費白嫖的東西就是好東西，給老子用！<br>於是我們在这里搞了兩個多小時，以下是搞出來的網頁<br><img src="https://ftp.bmp.ovh/imgs/2021/05/8adefaa0eb030da4.png" alt=""><br>這個，我是個渣渣不配搞！<br>登入 VPSWALA 的賬號，找到子域，創建子域<br><img src="https://ftp.bmp.ovh/imgs/2021/05/08d0638268752ac3.png" alt=""><br> emmm，好像忘了，反正又是搞 IP，又是搞域名的解析，我已經混亂了，不過搭建的流程就是這些了</p><p>## 最終的註釋</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> -tlpn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看看端口 1080 是否啓動，這是 “科學上網” 的內容請自行查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> ~/Documents/env.sh$ <span class="token builtin class-name">alias</span> <span class="token assign-left variable">us_socks</span><span class="token operator">=</span><span class="token string">"ssh -NfD 1080 kinomoto@62.171.172.114"</span>$ <span class="token builtin class-name">source</span> ~/.bashrc$ us_socks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>執行完就應該搞定上線了吧，我也是在終端挖出僅有的代碼了</p><p>github 還要上傳新博客時要重新設定域名，解決方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> yuban@yuban-PC:~/Documents/program/web/blog/source$ <span class="token builtin class-name">echo</span> <span class="token string">"kinomotosakura.net"</span> <span class="token operator">&gt;</span> CNAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>寫博客時上傳圖片我也不知道怎麼改，相對路徑和絕對路徑都不行，最後在 utools 中的圖牀上傳搞外部鏈接</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2021/05/10/test/"/>
      <url>2021/05/10/test/</url>
      
        <content type="html"><![CDATA[<h4 id="test"><a class="markdownIt-Anchor" href="#test">#</a> Test</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello world!</title>
      <link href="2021/05/09/hello-world/"/>
      <url>2021/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="這是我的第一個博客搞了三天週五到週日從一無所知的小白到會抄代碼的新人我覺得是學會了很多我從想用wordpress到被大佬指點使用hexo我真是太難了"><a class="markdownIt-Anchor" href="#這是我的第一個博客搞了三天週五到週日從一無所知的小白到會抄代碼的新人我覺得是學會了很多我從想用wordpress到被大佬指點使用hexo我真是太難了">#</a> 這是我的第一個博客，搞了三天，週五到週日，從一無所知的小白到會抄代碼的新人，我覺得是學會了很多，我從想用 WordPress 到被大佬指點使用 Hexo 我真是太難了。</h3><h3 id="作爲一個正經的程序猿我們必須向這個世界說一聲"><a class="markdownIt-Anchor" href="#作爲一個正經的程序猿我們必須向這個世界說一聲">#</a> 作爲一個正經的程序猿，我們必須向這個世界說一聲</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ Hello world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="welcome-to-樺煙君の領域"><a class="markdownIt-Anchor" href="#welcome-to-樺煙君の領域">#</a> Welcome to 樺煙君の領域！</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="2021/05/09/my-new-post/"/>
      <url>2021/05/09/my-new-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/08/hello-world/"/>
      <url>2021/05/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
